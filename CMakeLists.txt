cmake_minimum_required(VERSION 3.8)

project(xray-1.7.0)

if (CMAKE_SIZEOF_VOID_P EQUAL 4)
    set(ARCH_X86 TRUE)
else()
    set(ARCH_X86 FALSE)
endif()

set(BIN_PATH "" CACHE STRING "engine bin output directory path")
option(BUILD_UTILS "enable utils projects build" OFF)

if ("${BIN_PATH}" STREQUAL "")
    message(FATAL_ERROR "Invalid bin path")
endif()

if(NOT EXISTS "$ENV{DXSDK_DIR}")
    message(FATAL_ERROR "DirectX SDK not found")
endif()

set(DXSDK_DIR $ENV{DXSDK_DIR})
set(DXSDK_INCLUDE_DIR ${DXSDK_DIR}/include)
if (ARCH_X86)
    set(DXSDK_LIB_DIR ${DXSDK_DIR}/lib/x86)
else()
    set(DXSDK_LIB_DIR ${DXSDK_DIR}/lib/x64)
endif()

if (MSVC)
    if (MSVC_VERSION EQUAL 1900)
        set(VS_TOOLS_PATH $ENV{VS140COMNTOOLS})
        set(VC_ENV_BAT ${VS_TOOLS_PATH}../../VC/vcvarsall.bat)
    else()
        message(FATAL_ERROR "Only MSVC 14.0 (MSVS 2015) is supported")
    endif()
else()
    message(FATAL_ERROR "Only MSVC compiler is supported")
endif()

set(CMAKE_CONFIGURATION_TYPES "Debug;RelWithDebInfo" CACHE STRING "" FORCE)
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

string(REGEX REPLACE "/EH[a-z]+" "" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
add_compile_options(/MP "$<$<CONFIG:RELWITHDEBINFO>:/GL>" "$<$<CONFIG:RELWITHDEBINFO>:/Ob2>"
                    "$<$<CONFIG:DEBUG>:/EHsc>" "$<$<CONFIG:RELWITHDEBINFO>:/Ot>"
                    "$<$<CONFIG:RELWITHDEBINFO>:/wd4577>")
if (ARCH_X86)
    add_compile_options("$<$<CONFIG:RELWITHDEBINFO>:/arch:SSE2>")
endif()

set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDEBUG")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -D_HAS_EXCEPTIONS=0")

if (ARCH_X86)
    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} /LARGEADDRESSAWARE")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /LARGEADDRESSAWARE")
endif()

set(SHARED_RELEASE_LINKER_FLAGS "/LTCG /OPT:REF /INCREMENTAL:NO")
set(STATIC_RELEASE_LINKER_FLAGS "/LTCG")
set(CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO} ${SHARED_RELEASE_LINKER_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO} ${SHARED_RELEASE_LINKER_FLAGS}")
set(CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO} ${STATIC_RELEASE_LINKER_FLAGS}")
unset(SHARED_RELEASE_LINKER_FLAGS)
unset(STATIC_RELEASE_LINKER_FLAGS)

if (ARCH_X86)
    set(BIN_OUT_PATH ${BIN_PATH}/x86)
    set(LIB_OUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/code/lib/x86)
    set(PDB_OUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/code/pdb/x86)
else()
    set(BIN_OUT_PATH ${BIN_PATH}/x64)
    set(LIB_OUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/code/lib/x64)
    set(PDB_OUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/code/pdb/x64)
endif()

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${BIN_OUT_PATH})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${BIN_OUT_PATH})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${LIB_OUT_PATH})
set(CMAKE_PDB_OUTPUT_DIRECTORY ${PDB_OUT_PATH})

include_directories(code/3rd-party code/engine code/utils)

# 3d-party
add_subdirectory(code/3rd-party/zlib)
add_subdirectory(code/3rd-party/minizip)
add_subdirectory(code/3rd-party/bugtrap)
add_subdirectory(code/3rd-party/dxerr2015)
add_subdirectory(code/3rd-party/oalib)
add_subdirectory(code/3rd-party/ode)
add_subdirectory(code/3rd-party/openal)
add_subdirectory(code/3rd-party/luajit)
add_subdirectory(code/3rd-party/luabind)
add_subdirectory(code/3rd-party/imdexlib)
add_subdirectory(code/3rd-party/libogg)
add_subdirectory(code/3rd-party/libtheora)
add_subdirectory(code/3rd-party/libvorbis)
add_subdirectory(code/3rd-party/libvorbisfile)
add_subdirectory(code/3rd-party/ati)
add_subdirectory(code/3rd-party/loki)
add_subdirectory(code/3rd-party/nvapi)
add_subdirectory(code/3rd-party/DPlay)
add_subdirectory(code/3rd-party/eax)
add_subdirectory(code/3rd-party/cs)

set_target_properties(zlib PROPERTIES FOLDER 3rd-party)
set_target_properties(minizip PROPERTIES FOLDER 3rd-party)
set_target_properties(bugtrap PROPERTIES FOLDER 3rd-party)
set_target_properties(dxerr2015 PROPERTIES FOLDER 3rd-party)
set_target_properties(oalib PROPERTIES FOLDER 3rd-party)
set_target_properties(ode PROPERTIES FOLDER 3rd-party)
set_target_properties(openal32 PROPERTIES FOLDER 3rd-party)
set_target_properties(luajit-build PROPERTIES FOLDER 3rd-party)
set_target_properties(luabind PROPERTIES FOLDER 3rd-party)
set_target_properties(imdexlib-src PROPERTIES FOLDER 3rd-party)
set_target_properties(libogg PROPERTIES FOLDER 3rd-party)
set_target_properties(libtheora PROPERTIES FOLDER 3rd-party)
set_target_properties(libvorbis PROPERTIES FOLDER 3rd-party)
set_target_properties(libvorbisfile PROPERTIES FOLDER 3rd-party)
set_target_properties(ati-src PROPERTIES FOLDER 3rd-party)
set_target_properties(loki-src PROPERTIES FOLDER 3rd-party)
set_target_properties(nvapi-src PROPERTIES FOLDER 3rd-party)
set_target_properties(DPlay-src PROPERTIES FOLDER 3rd-party)
set_target_properties(eax-src PROPERTIES FOLDER 3rd-party)
set_target_properties(cs-src PROPERTIES FOLDER 3rd-party)

#engine
add_subdirectory(code/engine/xrCore)
add_subdirectory(code/engine/xrAPI)
add_subdirectory(code/engine/xrCDB)
add_subdirectory(code/engine/xrXMLParser)
add_subdirectory(code/engine/xrSound)
add_subdirectory(code/engine/xrNetServer)
add_subdirectory(code/engine/xrEngine)
add_subdirectory(code/engine/xrCPU_Pipe)
add_subdirectory(code/engine/xrParticles)
add_subdirectory(code/engine/xrPhysics)
add_subdirectory(code/engine/xrGame)
add_subdirectory(code/engine/xrRenderPC_R1)
add_subdirectory(code/engine/xrRenderPC_R2)
add_subdirectory(code/engine/xrRenderPC_R3)
add_subdirectory(code/engine/xrRenderPC_R4)

set_target_properties(xrCore PROPERTIES FOLDER engine)
set_target_properties(xrAPI PROPERTIES FOLDER engine)
set_target_properties(xrCDB PROPERTIES FOLDER engine)
set_target_properties(xrXMLParser PROPERTIES FOLDER engine)
set_target_properties(xrSound PROPERTIES FOLDER engine)
set_target_properties(xrNetServer PROPERTIES FOLDER engine)
set_target_properties(xrEngine PROPERTIES FOLDER engine)
set_target_properties(xrCPU_Pipe PROPERTIES FOLDER engine)
set_target_properties(xrParticles PROPERTIES FOLDER engine)
set_target_properties(xrPhysics PROPERTIES FOLDER engine)
set_target_properties(xrGame PROPERTIES FOLDER engine)
set_target_properties(xrRender_R1 PROPERTIES FOLDER engine)
set_target_properties(xrRender_R2 PROPERTIES FOLDER engine)
set_target_properties(xrRender_R3 PROPERTIES FOLDER engine)
set_target_properties(xrRender_R4 PROPERTIES FOLDER engine)

set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT xrEngine)

if (${BUILD_UTILS})
    add_subdirectory(code/3rd-party/freeimage/libjpeg)
    add_subdirectory(code/3rd-party/freeimage/libjxr)
    add_subdirectory(code/3rd-party/freeimage/libopenjpeg)
    add_subdirectory(code/3rd-party/freeimage/libpng)
    add_subdirectory(code/3rd-party/freeimage/librawlite)
    add_subdirectory(code/3rd-party/freeimage/libtiff4)
    add_subdirectory(code/3rd-party/freeimage/libwebp)
    add_subdirectory(code/3rd-party/freeimage/openexr)
    add_subdirectory(code/3rd-party/freeimage/freeimage)

    set_target_properties(libjpeg PROPERTIES FOLDER "3rd-party/freeimage")
    set_target_properties(libjxr PROPERTIES FOLDER "3rd-party/freeimage")
    set_target_properties(libopenjpeg PROPERTIES FOLDER "3rd-party/freeimage")
    set_target_properties(libpng PROPERTIES FOLDER "3rd-party/freeimage")
    set_target_properties(libraw PROPERTIES FOLDER "3rd-party/freeimage")
    set_target_properties(libtiff4 PROPERTIES FOLDER "3rd-party/freeimage")
    set_target_properties(libwebp PROPERTIES FOLDER "3rd-party/freeimage")
    set_target_properties(openexr PROPERTIES FOLDER "3rd-party/freeimage")
    set_target_properties(FreeImage PROPERTIES FOLDER "3rd-party/freeimage")

    add_subdirectory(code/utils/ctool)
    add_subdirectory(code/utils/xrCompress)
    add_subdirectory(code/utils/xrQSlim)
    add_subdirectory(code/utils/xrSE_Factory)
    add_subdirectory(code/utils/ETools)
    add_subdirectory(code/utils/CompressionTest)
    add_subdirectory(code/utils/LWO)
    add_subdirectory(code/utils/xrAI)
    add_subdirectory(code/utils/xrDXT)
    add_subdirectory(code/utils/xrLC_Light)
    add_subdirectory(code/utils/xrLC_LightStab)
    add_subdirectory(code/utils/xrDO_Light)
    add_subdirectory(code/utils/xrLC)

    set_target_properties(ctool PROPERTIES FOLDER utils)
    set_target_properties(xrCompress PROPERTIES FOLDER utils)
    set_target_properties(xrQSlim PROPERTIES FOLDER utils)
    set_target_properties(xrSE_Factory PROPERTIES FOLDER utils)
    set_target_properties(ETools PROPERTIES FOLDER utils)
    set_target_properties(CompressionTest PROPERTIES FOLDER utils)
    set_target_properties(LWO PROPERTIES FOLDER utils)
    set_target_properties(xrAI PROPERTIES FOLDER utils)
    set_target_properties(xrDXT PROPERTIES FOLDER utils)
    set_target_properties(xrLC_Light PROPERTIES FOLDER utils)
    set_target_properties(xrLC_LightStab PROPERTIES FOLDER utils)
    set_target_properties(xrDO_Light PROPERTIES FOLDER utils)
    set_target_properties(xrLC PROPERTIES FOLDER utils)
endif()